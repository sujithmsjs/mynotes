package com.suji.sec.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.suji.sec.util.Auth;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private PasswordEncoder encoder;

	@Autowired
	private UserDetailsService uds;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		auth.userDetailsService(uds).passwordEncoder(encoder);
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.authorizeRequests()
				.antMatchers("/h2-console/**","/register/**","/rest/users/**").permitAll()
				.antMatchers("/admin").hasAuthority(Auth.ADMIN)
				.antMatchers("/tasks").hasAnyAuthority(Auth.ADMIN, Auth.TL)
				.anyRequest().authenticated()
				.and()
				// the boolean flags force the redirection even though
				// the user requested a specific secured resource.
				.formLogin().defaultSuccessUrl("/home", true).permitAll()
				// .formLogin().successForwardUrl("/home").permitAll()
				.and().logout().permitAll();

		// this will ignore only h2-console csrf, spring security 4+
		http.csrf().ignoringAntMatchers("/h2-console/**");
		// this will allow frames with same origin which is much more safe
		http.headers().frameOptions().sameOrigin();
	}

}