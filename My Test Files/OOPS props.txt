Object:
Any entity that has state and behavior is known as an object.

Class:
A class can also be defined as a blueprint from which you can create an individual object.

Inheritance:
When one object acquires all the properties and behaviors of a parent object, it is known as inheritance.
- It provides code reusability.
- It is used to achieve runtime polymorphism.

Polymorphism:
If one task is performed in different ways, it is known as polymorphism.
- Method overloading
- Method overriding

Abstraction:
Hiding internal details and showing functionality is known as abstraction.
- We use abstract class and interface to achieve abstraction.

Encapsulation:
Binding (or wrapping) code and data together into a single unit are known as encapsulation.

Java bean is the fully encapsulated class because all the data members are private here.

Coupling:
Coupling refers to the knowledge or information or dependency of another class.
- interfaces for weaker coupling
- If a class has the details information of another class, there is strong coupling.

Cohesion
Cohesion refers to the level of a component which performs a single well-defined task. A single well-defined task is done by a highly cohesive method. 

Cohesion in Java is the Object-Oriented principle most closely associated with making sure that a class is designed with a single, well-focused purpose.

Note: The more focused a class is, the more cohesiveness of that class is more.

The advantage of high cohesion is that such classes are much easier to maintain (and less frequently changed) than classes with low cohesion. 

Pictorial view of high cohesion and low cohesion: 
- More reusable
- Maintable
- Reusability
https://www.geeksforgeeks.org/cohesion-in-java/

Association
Association represents the relationship between the objects.
One object can be associated with one object or many objects. 
It is also termed as a has-a relationship in Java.
There can be four types of association between the objects:

One to One
One to Many
Many to One, and
Many to Many

https://www.javatpoint.com/java-oops-concepts

Association can be undirectional or bidirectional.


Association, Composition and Aggregation

When do we use Aggregation ?? 
Code reuse is best achieved by aggregation.  

Composition is a restricted form of Aggregation in which two entities are highly dependent on each other.  

Note: In composition, both entities are dependent on each other. When there is a composition between two entities, the composed object cannot exist without the other entity.

Aggregation vs Composition 
1. Dependency: Aggregation implies a relationship where the child can exist independently of the parent. For example, Bank and Employee, delete the Bank and the Employee still exist. whereas Composition implies a relationship where the child cannot exist independent of the parent. Example: Human and heart, heart don’t exist separate to a Human

2. Type of Relationship: Aggregation relation is “has-a” and composition is “part-of” relation.

3. Type of association: Composition is a strong Association whereas Aggregation is a weak Association.

Terms:
Covariant Return Type
class hierarchy 
usable, readable, and maintainable.
the liberty to have





