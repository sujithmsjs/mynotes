/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.suji.ui.xhtml;


import java.awt.Color;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;



/**
 *
 * @author sujit
 */
public class XHTMLEditor extends javax.swing.JFrame {


    
    
    public XHTMLEditor() {
        initComponents();
        
        
        
                
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        pane = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMenu = new javax.swing.JMenuItem();
        xHtml = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        bold = new javax.swing.JMenuItem();
        normal = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        testHtml = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XHTML Editor");
        setPreferredSize(new java.awt.Dimension(900, 600));

        pane.setContentType("text/html"); // NOI18N
        pane.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pane.setMinimumSize(new java.awt.Dimension(800, 600));
        pane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                paneKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(pane);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenu);

        xHtml.setText("xHtml");
        xHtml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xHtmlActionPerformed(evt);
            }
        });
        jMenu1.add(xHtml);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tools");

        bold.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        bold.setText("Bold");
        bold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldActionPerformed(evt);
            }
        });
        jMenu3.add(bold);

        normal.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        normal.setText("Normal");
        normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalActionPerformed(evt);
            }
        });
        jMenu3.add(normal);

        jMenuItem1.setText("Clear");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Demo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        testHtml.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        testHtml.setText("Test HTML");
        testHtml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testHtmlActionPerformed(evt);
            }
        });
        jMenu3.add(testHtml);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void paneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paneKeyTyped

        checkAllRegExs();
        
        
        

    }//GEN-LAST:event_paneKeyTyped

    private void boldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldActionPerformed
        
        boldStyle();
        System.out.println(pane.getText());
        
    }//GEN-LAST:event_boldActionPerformed

    private void normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalActionPerformed
        normalStyle();
        System.out.println(pane.getText());
    }//GEN-LAST:event_normalActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       
        

        
        
        
        StyledDocument doc = (StyledDocument) pane.getDocument();

        int selectionEnd = pane.getSelectionEnd();
        int selectionStart = pane.getSelectionStart();

        Element element = doc.getCharacterElement(selectionStart);
        AttributeSet as = element.getAttributes();

        MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
        
        StyleConstants.setForeground(asNew, Color.BLACK);
        StyleConstants.setBackground(asNew, Color.YELLOW);
        StyleConstants.setBold(asNew, false);
        
        pane.setCharacterAttributes(asNew, false);
       
        showAttributes(asNew);
      
        
        
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
   
        
        
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
       
        PrintWriter pw = null;
        PrintWriter pw2 = null;
        PrintWriter pw3 = null;
        try {

            File file = new File("C:\\Users\\sujit\\OneDrive\\Desktop\\Articles\\auto.html");
            File file2 = new File("C:\\Users\\sujit\\OneDrive\\Desktop\\Articles\\auto.txt");
            File file3 = new File("C:\\Users\\sujit\\OneDrive\\Desktop\\Articles\\Org.html");
            
            pw = new PrintWriter(new FileWriter(file));
            pw2 = new PrintWriter(new FileWriter(file2));
            pw3 = new PrintWriter(new FileWriter(file3));
            
            String html = pane.getText();
            String txt = pane.getDocument().getText(0, pane.getDocument().getLength());
            
            
            pw.print(html);
            pw2.print(txt);
         
            
            String pureHtml = TextTools.textToHtml(txt);
            pw3.print(pureHtml);
            
            JOptionPane.showMessageDialog(this, "File Saved Successfully.");
            
            
            
        } catch (IOException ex) {
            System.out.println(ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(XHTMLEditor.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            pw.close();
            pw2.close();
            pw3.close();
        }
        
        
        
    }//GEN-LAST:event_saveMenuActionPerformed

    private void testHtmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testHtmlActionPerformed
        checkAllRegExs();
    }//GEN-LAST:event_testHtmlActionPerformed

    private void xHtmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xHtmlActionPerformed

        try {
            
            String txt = pane.getDocument().getText(0, pane.getDocument().getLength());
            
            String htmlCode = TextTools.textToHtml(txt);
           
            
            TextFileUtil.saveAsHTML("Susmitha.xhtml",htmlCode );
            
            
        } catch (BadLocationException ex) {
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_xHtmlActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XHTMLEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XHTMLEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XHTMLEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XHTMLEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XHTMLEditor().setVisible(true);
            }
        });
    }
    
    
    public static void applyRegex(String regex, JTextPane pane, Color highlightColor) {

        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(pane.getText());
        
        
        
        while (matcher.find()) {

            int start = matcher.start();
            int end = matcher.end();

            System.out.println(start + ":" + end);

            StyleContext sc = StyleContext.getDefaultStyleContext();
            AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, highlightColor);

            pane.getStyledDocument().setCharacterAttributes(start, end - start, aset, true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bold;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem normal;
    private javax.swing.JTextPane pane;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JMenuItem testHtml;
    private javax.swing.JMenuItem xHtml;
    // End of variables declaration//GEN-END:variables

    private void boldText() {
        
        SimpleAttributeSet attributeSet = new SimpleAttributeSet();
        
        StyleConstants.setBold(attributeSet, true);

        // StyleConstants.setForeground(attributeSet, Color.black);
        //  StyleConstants.setBackground(attributeSet, Color.orange);
        String str = pane.getSelectedText();
        StyledDocument doc = pane.getStyledDocument();

        int start = pane.getSelectionStart();
        int end = pane.getSelectionEnd();

        System.out.println(str + " : " + start + " - " + end);

        //  doc.insertString(pane.getSelectionStart(), str, attributeSet);
        doc.setCharacterAttributes(start, end - start, attributeSet, true);

        // pane.setCharacterAttributes(attributeSet, true);
        // pane.setText(str);
    }

    public void applyItalic() {

        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground,
                Color.RED);

        int start = pane.getSelectionStart();
        int end = pane.getSelectionEnd();
        pane.getStyledDocument().setCharacterAttributes(start, end - start - 1, aset,
                true);
    }
    
    public static void addStyle(JTextPane pane, String name, Color foreground, Color background) {
        StyledDocument doc = pane.getStyledDocument();
        StyleContext context = StyleContext.getDefaultStyleContext();
        Style defaultStyle = context.getStyle(StyleContext.DEFAULT_STYLE);
        Style style = doc.addStyle(name, defaultStyle);
        StyleConstants.setForeground(style, foreground);
        StyleConstants.setBackground(style, background);
    }
    
    
    
    private void boldStyle() {
        StyledDocument doc = (StyledDocument) pane.getDocument();
        
        int selectionEnd = pane.getSelectionEnd();
        int selectionStart = pane.getSelectionStart();
        
        if (selectionStart == selectionEnd) {
            return;
        }
        
        Element element = doc.getCharacterElement(selectionStart);
        AttributeSet as = element.getAttributes();

        MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
        StyleConstants.setForeground(asNew, Color.GREEN);
        StyleConstants.setBold(asNew, !StyleConstants.isBold(as));
        doc.setCharacterAttributes(selectionStart, pane.getSelectedText().length(), asNew, true);
        String text = (StyleConstants.isBold(as) ? "Cancel Bold" : "Bold");
        //btnStyle.setText(text);
    }
    
    public void attributesDetails(){
        int n = pane.getCaretPosition();
        StyledDocument doc = pane.getStyledDocument();

        Element element = doc.getCharacterElement(n);

        AttributeSet as = element.getAttributes();

        System.out.println(as);

        Enumeration e = as.getAttributeNames();
        while (e.hasMoreElements()) {
            Object obj = e.nextElement();
            System.out.println(obj + " : " + as.getAttribute(obj));
        }
    }

    private void showAttributes(AttributeSet atrSet) {
        Enumeration e = atrSet.getAttributeNames();
        while (e.hasMoreElements()) {
            Object obj = e.nextElement();
            System.out.println(obj + " : " + atrSet.getAttribute(obj));
        }
    }

    private void applyStyle(SimpleAttributeSet atrSet) {
        
        
        StyledDocument doc =  pane.getStyledDocument();
        

        int selectionEnd = pane.getSelectionEnd();
        int selectionStart = pane.getSelectionStart();

        if (selectionStart == selectionEnd) {
            return;
        }

        Element element = doc.getCharacterElement(selectionStart);
        AttributeSet as = element.getAttributes();

        
        MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
        
        
        StyleConstants.setForeground(asNew, Color.GREEN);
        StyleConstants.setBackground(asNew, Color.BLACK);
        
        StyleConstants.setBold(asNew, true);
        
        
        doc.setCharacterAttributes(selectionStart, pane.getSelectedText().length(), asNew, true);
        String text = (StyleConstants.isBold(as) ? "Cancel Bold" : "Bold");
    }
    
    
    public void demo(){
        StyledDocument doc = pane.getStyledDocument();
       
        // Create Simple AttrituteSet
        SimpleAttributeSet atrSet = new SimpleAttributeSet();
        
        // Apply Styles
        StyleConstants.setBold(atrSet, true);
        StyleConstants.setBackground(atrSet, Color.BLUE);
        StyleConstants.setUnderline(atrSet, true);
        
        
        // Showing attributes
        showAttributes(atrSet);
        
        //Apply Style
        applyStyle(atrSet);
    }
    
    public void removeStyles(){
        
        StyledDocument doc = pane.getStyledDocument();
       
        // Create Simple AttrituteSet
        SimpleAttributeSet atrSet = new SimpleAttributeSet();
        
        // Apply Styles
        StyleConstants.setBold(atrSet, true);
        StyleConstants.setBackground(atrSet, Color.BLUE);
        StyleConstants.setUnderline(atrSet, true);
        
        
        // Showing attributes
        showAttributes(atrSet);
        
        //Apply Style
        applyStyle(atrSet);
    }
    
    
    private void normalStyle() {
        
        
        StyledDocument doc = (StyledDocument) pane.getDocument();
        
        int selectionEnd = pane.getSelectionEnd();
        int selectionStart = pane.getSelectionStart();
        
        if (selectionStart == selectionEnd) {
            return;
        }
        
        Element element = doc.getCharacterElement(selectionStart);
        AttributeSet as = element.getAttributes();

        MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
        StyleConstants.setForeground(asNew, Color.RED);
        StyleConstants.setBold(asNew, false);
        doc.setCharacterAttributes(selectionStart, pane.getSelectedText().length(), asNew, true);
        String text = (StyleConstants.isBold(as) ? "Cancel Bold" : "Bold");
        
        
    }

    private void removeAttribute(MutableAttributeSet atrSet) {
        Enumeration e = atrSet.getAttributeNames();
        ArrayList<Object> list = new ArrayList<>();
        while (e.hasMoreElements()) {
            Object obj = e.nextElement();
            System.out.println(obj + " : " + atrSet.getAttribute(obj)+"Removed");
            list.add(obj);
        }
        
        for (Object object : list) {
            atrSet.removeAttribute(object);
        }
    }

    private void applyRegEx(String regEx,Color color) {
        
        try {
            StyledDocument doc = (StyledDocument) pane.getDocument();
            
            Pattern p = Pattern.compile(regEx);
            Matcher m = p.matcher(pane.getDocument().getText(0, pane.getDocument().getLength()));
            

            int x = pane.getCaretPosition();
            
            Element element = doc.getCharacterElement(x);
            AttributeSet as = element.getAttributes();
            
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            StyleConstants.setForeground(asNew, color);
            //StyleConstants.setBold(asNew, true);
            
            while(m.find()){
                
                doc.setCharacterAttributes(m.start(), m.end() - m.start(), asNew, true);
            
            }
            
            
            
           // String text = (StyleConstants.isBold(as) ? "Cancel Bold" : "Bold");
            //btnStyle.setText(text);
        } catch (BadLocationException ex) {
            Logger.getLogger(XHTMLEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void checkAllRegExs() {
        
        applyRegEx(".", Color.BLACK);        
        
        
        applyRegEx(RegExConst.PARA, Color.ORANGE);
        
        
        applyRegEx(RegExConst.HEAD_1, Color.GREEN);
        applyRegEx(RegExConst.HEAD_3, Color.RED);
        applyRegEx(RegExConst.LIST, Color.PINK);
        applyRegEx(RegExConst.NUM_LIST, Color.MAGENTA);
        applyRegEx(RegExConst.HEAD_4, Color.CYAN);
        
        
        applyRegEx(RegExConst.PAGE_BREAK, Color.BLUE);
        
        //applyRegEx(RegExConst.ITALIC, Color.CYAN);
        //applyRegEx(RegExConst.BOLD, Color.MAGENTA);
        
    }
    
 
    
}
