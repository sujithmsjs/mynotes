
import com.jtattoo.plaf.noire.NoireLookAndFeel;
import java.awt.Container;
import java.awt.Dimension;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import note.util.DBUtil;


public class ViewMode2 extends javax.swing.JFrame {
    
   private  WordReader wr;

    public ViewMode2(ResultSet rSet,int index) {
        initComponents();
        wr = new WordReader(rSet,index);
        image.setVisible(false);
        imageMenu.setVisible(false);
        setLocationRelativeTo(null);
        updateCombo();
        
        
        
        setLoadWord(wr.getWordAt(index));
        
        
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, wr.getWordsCount(), 1));
        
    }
    
    public void setLoadWord(Word w) {
        titleTf.setText(w.getTitle());
        topicCb.setActionCommand(w.getTitle());
        briefTa.setText(w.getBrief());
        notesTa.setText(w.getNotes());
        InputStream is = w.getImage();
        ImageIcon imageIcon = null;
        if (is != null) {
           
            imageIcon = BlobImageUtil.getImageIcon(is);
            image.setIcon(imageIcon);
            imageFound();
        }else{
            image.setIcon(null);
            imageNotFound();
        } 
    }
    
    public void imageFound() {
        image.setVisible(true);
        imageMenu.setVisible(true);
        includeMBtn.setVisible(false);
       // includeMBtn.setSelected(true);
        viewImageCk.setSelected(true);
        viewImageCk1.setSelected(true);
    }
    
    public void imageNotFound() {
        image.setVisible(false);
        includeMBtn.setVisible(true);
        includeMBtn.setSelected(false);
        imageMenu.setVisible(false);
        viewImageCk.setSelected(false);
        viewImageCk1.setSelected(false);
    }
    
    
    
    public void updateCombo(){
        String[] topics = QueryFactory.getTopics();
        topicCb.setModel(new javax.swing.DefaultComboBoxModel<>(topics));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        briefTa = new javax.swing.JTextArea();
        image = new javax.swing.JLabel();
        topicCb = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        notesTa = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        saveBtn = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        viewTopicMBtn = new javax.swing.JCheckBoxMenuItem();
        viewImageCk = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        includeMBtn = new javax.swing.JCheckBoxMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        imageMenu = new javax.swing.JMenu();
        changeImg = new javax.swing.JMenuItem();
        deleteImage = new javax.swing.JMenuItem();
        viewImageCk1 = new javax.swing.JCheckBoxMenuItem();
        isImage = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("View Mode 2");

        titleTf.setEditable(false);
        titleTf.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleTf.setFocusable(false);
        titleTf.setMargin(new java.awt.Insets(5, 5, 5, 5));

        briefTa.setColumns(20);
        briefTa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        briefTa.setRows(2);
        briefTa.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPane1.setViewportView(briefTa);

        image.setBackground(new java.awt.Color(255, 51, 51));
        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        image.setSize(400, 200);
        image.setBorder(javax.swing.BorderFactory.createTitledBorder("Image"));
        image.setPreferredSize(new java.awt.Dimension(400, 600));
        image.setRequestFocusEnabled(false);

        topicCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        notesTa.setColumns(20);
        notesTa.setRows(5);
        jScrollPane2.setViewportView(notesTa);

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSpinner1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jSpinner1.setPreferredSize(new java.awt.Dimension(100, 40));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jMenu1.setMnemonic('F');
        jMenu1.setText("File");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setMnemonic('N');
        jMenuItem7.setText("New");
        jMenu1.add(jMenuItem7);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setMnemonic('O');
        jMenuItem4.setText("Open");
        jMenuItem4.setToolTipText("Opens all the words.");
        jMenu1.add(jMenuItem4);

        saveBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveBtn.setMnemonic('S');
        saveBtn.setText("Save");
        saveBtn.setToolTipText("Save the word to the data base.");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jMenu1.add(saveBtn);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setMnemonic('x');
        jMenuItem5.setText("Exit");
        jMenuItem5.setToolTipText("");
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");
        jMenu2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jMenu2ItemStateChanged(evt);
            }
        });

        viewTopicMBtn.setSelected(true);
        viewTopicMBtn.setText("Topics");
        viewTopicMBtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewTopicMBtnItemStateChanged(evt);
            }
        });
        jMenu2.add(viewTopicMBtn);

        viewImageCk.setText("View Image");
        viewImageCk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewImageCkItemStateChanged(evt);
            }
        });
        jMenu2.add(viewImageCk);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Brief");
        jCheckBoxMenuItem1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenuItem1ItemStateChanged(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Notes");
        jCheckBoxMenuItem2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenuItem2ItemStateChanged(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem2);

        jMenuItem6.setText("Todays work");
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('I');
        jMenu3.setText("Insert");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        includeMBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        includeMBtn.setText("Include Image");
        includeMBtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                includeMBtnItemStateChanged(evt);
            }
        });
        jMenu3.add(includeMBtn);

        jMenuItem3.setText("Add Topic");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Display");

        jMenuItem1.setText("Night Owl");
        jMenu4.add(jMenuItem1);

        jMenuItem2.setText("Early Bird");
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        imageMenu.setText("Image");

        changeImg.setText("Change Image");
        changeImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeImgActionPerformed(evt);
            }
        });
        imageMenu.add(changeImg);

        deleteImage.setText("Delete Image");
        deleteImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageActionPerformed(evt);
            }
        });
        imageMenu.add(deleteImage);

        viewImageCk1.setText("View Image");
        viewImageCk1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewImageCk1ItemStateChanged(evt);
            }
        });
        imageMenu.add(viewImageCk1);

        isImage.setSelected(true);
        isImage.setText("Save with data");
        imageMenu.add(isImage);

        jMenuBar1.add(imageMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(image, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1)
                    .addComponent(titleTf)
                    .addComponent(topicCb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(image, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(topicCb, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(titleTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jMenu2ItemStateChanged
        
    }//GEN-LAST:event_jMenu2ItemStateChanged

    public static final JScrollPane getScrollPane(JComponent component) {
        Container p = component.getParent();
        if (p instanceof JViewport) {
            Container gp = p.getParent();
            if (gp instanceof JScrollPane) {
                return (JScrollPane) gp;
            }
        }
        return null;

    } 
    
    
    private void viewTopicMBtnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewTopicMBtnItemStateChanged
        int state = evt.getStateChange(); // 1 is Selected, 2 is Unselected.
        if (state == 1) {
            topicCb.setVisible(true);
        } else {
            topicCb.setVisible(false);
        }
    }//GEN-LAST:event_viewTopicMBtnItemStateChanged

    private void jCheckBoxMenuItem1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ItemStateChanged
        int state = evt.getStateChange(); // 1 is Selected, 2 is Unselected.
        JScrollPane scrollPane = getScrollPane(briefTa);
        if (state == 1) {
            scrollPane.setVisible(true);
            briefTa.setVisible(true);
            revalidate();
            repaint();
            
        } else {
            briefTa.setVisible(false);
            scrollPane.setVisible(false);
            revalidate();
            repaint();
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ItemStateChanged

    private void jCheckBoxMenuItem2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ItemStateChanged
        int state = evt.getStateChange(); // 1 is Selected, 2 is Unselected.
        JScrollPane scrollPane = getScrollPane(notesTa);
        if (state == 1) {
            scrollPane.setVisible(true);
            notesTa.setVisible(true);
            revalidate();
            repaint();
        } else {
            scrollPane.setVisible(false);
            notesTa.setVisible(false);
            revalidate();
            repaint();
        }
    }//GEN-LAST:event_jCheckBoxMenuItem2ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateWord();
       try {
           wr.getRs().refreshRow();
       } catch (Exception ex) {
           System.out.println(ex);
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        updateWord();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void viewImageCkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewImageCkItemStateChanged
        int state = evt.getStateChange(); // 1 is Selected, 2 is Unselected.
        if (state == 1) {
            image.setVisible(true);
        }else{
            image.setVisible(false);
        }
    }//GEN-LAST:event_viewImageCkItemStateChanged

    private void includeMBtnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_includeMBtnItemStateChanged
        int state = evt.getStateChange(); // 1 is Selected, 2 is Unselected.
        if (state == 1) {
            ImageIcon imageIcon = BlobImageUtil.setImageFile(this, 400, 200);
            if (imageIcon != null) {
                image.setIcon(imageIcon);
                image.setVisible(true);
                imageAdded();
            } else {
                System.out.println("Icon may not choosen.");
                includeMBtn.setSelected(false);
            }
        }
    }//GEN-LAST:event_includeMBtnItemStateChanged

    private void changeImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeImgActionPerformed
        
        ImageIcon imageIcon = BlobImageUtil.setImageFile(this, 380, 180);
        if (imageIcon != null) {
            image.setIcon(imageIcon);
            imageAdded();
        }
        
    }//GEN-LAST:event_changeImgActionPerformed
    public void imageAdded(){
        image.setVisible(true);
        imageMenu.setVisible(true);
        includeMBtn.setVisible(false);
        includeMBtn.setSelected(true);
        viewImageCk.setSelected(true);
        viewImageCk1.setSelected(true);
    }
    public void imageDeleted(){
        
        image.setVisible(false);
        includeMBtn.setVisible(true);
        includeMBtn.setSelected(false);
        imageMenu.setVisible(false);
        viewImageCk.setSelected(false);
        viewImageCk1.setSelected(false);
    }
    private void deleteImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteImageActionPerformed
        image.setIcon(null);
        imageDeleted();
        
    }//GEN-LAST:event_deleteImageActionPerformed

    private void viewImageCk1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewImageCk1ItemStateChanged
        int state = evt.getStateChange(); // 1 is Selected, 2 is Unselected.
        if (state == 1) {
            image.setVisible(true);
        } else {
            image.setVisible(false);
        }
    }//GEN-LAST:event_viewImageCk1ItemStateChanged

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        String showInputDialog = JOptionPane.showInputDialog(this, "Enter Topic", "Please enter your topic", JOptionPane.QUESTION_MESSAGE);
        
        if(showInputDialog!=null){
            boolean isAdded = QueryFactory.addNewTopic(showInputDialog);
            if(isAdded){
               updateCombo();
               topicCb.setSelectedItem(showInputDialog);
            }else{
                JOptionPane.showMessageDialog(null, "New topic not added","Error!" , JOptionPane.ERROR_MESSAGE);
            }
                
        }
           
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
       try {
           String toString = jSpinner1.getValue().toString();
           int curr = Integer.parseInt(toString);
           Word wordAt = wr.getWordAt(curr);
       //    wr.getRs().refreshRow();
           setLoadWord(wordAt);
           System.out.println("toString = " + toString);
       } catch (Exception ex) {
           System.out.println(ex);
       }
    }//GEN-LAST:event_jSpinner1StateChanged

    private void updateWord() {
        
        
        
        
        String title = titleTf.getText();
        String brief = briefTa.getText();
        String notes = notesTa.getText();
        String topic = topicCb.getSelectedItem().toString();
        boolean hasImage = includeMBtn.isSelected();
        
        
        
        
        InputStream inputStream = null;
        if (hasImage) {
            inputStream = BlobImageUtil.toIPS(image);
        }
        Word w = new Word(title, brief, notes, topic, inputStream);
        boolean isExisted = w.isExisted();
        
        System.out.println("isExisted = " + isExisted);
        if (isExisted) { //is WORD is already existed.
                boolean isUpdated = w.update(w);
                if (isUpdated) { //If UPDATION Successful.
                    int opt2 = JOptionPane.showConfirmDialog(this, "Values successfully updated.\n\n Wannaclear the fields?", "Updated", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    if (opt2 == 0) {
                        clearFields();
                        imageDeleted();
                    }
                } else { //If UPDATION failed.
                    JOptionPane.showMessageDialog(this, "Values not updated.", "Error!", JOptionPane.ERROR_MESSAGE);
                }
        } else { //if Word is not existed.
            boolean isSaved = w.save();
            if (isSaved) {
                int opt = JOptionPane.showConfirmDialog(this, "Values successfully inserted.\n\n Wannaclear the fields?", "Completed", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                if (opt == 0) {
                    clearFields();
                    imageDeleted();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Values not added.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
  
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            NoireLookAndFeel.setTheme("Large-Font");
            UIManager.setLookAndFeel("com.jtattoo.plaf.noire.NoireLookAndFeel");

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    System.out.println(NoireLookAndFeel.getTheme().getName());
                }
            });
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddWord.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(AddWord.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(AddWord.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(AddWord.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea briefTa;
    private javax.swing.JMenuItem changeImg;
    private javax.swing.JMenuItem deleteImage;
    private javax.swing.JLabel image;
    private javax.swing.JMenu imageMenu;
    private javax.swing.JCheckBoxMenuItem includeMBtn;
    private javax.swing.JCheckBoxMenuItem isImage;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextArea notesTa;
    private javax.swing.JMenuItem saveBtn;
    private javax.swing.JTextField titleTf;
    private javax.swing.JComboBox<String> topicCb;
    private javax.swing.JCheckBoxMenuItem viewImageCk;
    private javax.swing.JCheckBoxMenuItem viewImageCk1;
    private javax.swing.JCheckBoxMenuItem viewTopicMBtn;
    // End of variables declaration//GEN-END:variables

    private void clearFields() {
        image.setIcon(null);
        image.setVisible(false);
        titleTf.setText("");
        briefTa.setText("");
        notesTa.setText("");
        includeMBtn.setSelected(false);
    }
}
