
Notepad++ short cuts
lowercase: Ctrl +  U
uppercase: Ctrl +  Shift  +  U
title case: Alt +  U

JSP Tutorial
++++++++++++

A JSP page consists of HTML tags and JSP tags.


ADVANTAGES OF JSP OVER SERVLET

1) EXTENSION TO SERVLET
2) EASY TO MAINTAIN
3) LESS CODE THAN SERVLET


THE LIFECYCLE OF A JSP PAGE

1 Translation of JSP Page
2 Compilation of JSP Page
3 Classloading (the classloader loads class file)
4 Instantiation (Object of the Generated Servlet is created).
5 Initialization ( the container invokes jspInit() method).
6 Request processing ( the container invokes _jspService() method).
7 Destroy ( the container invokes jspDestroy() method).

JSP SCRIPTING ELEMENTS
++++++++++++++++++++++++++++
1. Scriptlet Tag
2.  Expression Tag
3.  Declaration Tag

1. SCRIPTLET TAG
used to execute java source code in JSP.
<%  java source code %>  

2.  EXPRESSION TAG
It is mainly used to print the values of variable or method.
<%=  statement %>

3.  DECLARATION TAG
The code written inside the jsp declaration tag is placed outside the service() method of auto generated servlet.
<%!  field or method declaration %>  

Exp:
<body>  
<%!   
int cube(int n){  
return n*n*n*;  
}  
%>  
<%= "Cube of 3 is:"+cube(3) %>  
</body>

IMPLICIT OBJECTS
+++++++++++++++++++++
1. out	JspWriter
2. request	HttpServletRequest
3. response	HttpServletResponse
4. config	ServletConfig
5. application	ServletContext
6. session	HttpSession
7. pageContext	PageContext
8. page	Object
9. exception	Throwable

1. OUT
PrintWriter out=response.getWriter();  

6. SESSION
HttpSession session = request.getSession();

4. CONFIG
This object can be used to get initialization parameter for a particular JSP page.

7. PAGECONTEXT	
The pageContext object can be used to set,get or remove attribute from one of the following scopes:

7.1. page
7.2. request
7.3. session
7.4. application

Example:
pageContext.setAttribute("user",name,PageContext.SESSION_SCOPE);

String name = (String) pageContext.getAttribute("user", PageContext.SESSION_SCOPE);  

8. PAGE	OBJECT
This object is assigned to the reference of auto generated servlet class. It is written as:
Object page=this;

9) EXCEPTION

Example:
<%@ page isErrorPage="true" %>  
<html>  
<body>  
  
Sorry following exception occured:<%= exception %>  
  
</body>  
</html>  

JSP DIRECTIVES
++++++++++++++++++
The jsp directives are messages that tells the web container how to translate a JSP page into the corresponding servlet.

There are three types of directives:

1. page directive
2. include directive
3. taglib directive

SYNTAX
<%@ directive attribute="value" %>  

1. Page Directive
The page directive defines attributes that apply to an entire JSP page.

SYNTAX
<%@ page attribute="value" %>  

1.1  import
1.2  contentType
1.3  extends
1.4  info
1.5  buffer
1.6  language
1.7  isELIgnored
1.8  isThreadSafe
1.9  autoFlush
1.10  session
1.11 pageEncoding
1.12  errorPage
1.13  isErrorPage

1.1  IMPORT

Example:
<body>  
  
<%@ page import="java.util.Date" %>  
Today is: <%= new Date() %>  
  
</body>  

1.2  CONTENT TYPE

Example:
<body>  
<%@ page contentType=application/msword %>  
Today is: <%= new java.util.Date() %>  
</body>  

1.4  INFO

Example:
<body>  
<%@ page info="composed by Sonoo Jaiswal" %>  
Today is: <%= new java.util.Date() %>  
</body> 

Compiled as
public String getServletInfo() {  
  return "composed by Sonoo Jaiswal";   
}

1.5 BUFFER

The buffer attribute sets the buffer size in kilobytes to handle output generated by the JSP page.The default size of the buffer is 8Kb.

Example:
<body>  
  
<%@ page buffer="16kb" %>  
Today is: <%= new java.util.Date() %>  
  
</body> 

1.8 IS THREAD SAFE

Servlet and JSP both are multithreaded.If you want to control this behaviour of JSP page, you can use isThreadSafe attribute of page directive.The value of isThreadSafe value is true.If you make it false, the web container will serialize the multiple requests, i.e. it will wait until the JSP finishes responding to a request before passing another request to it.If you make the value of isThreadSafe attribute like:
<%@ page isThreadSafe="false" %>


1.9 ERROR PAGE

The errorPage attribute is used to define the error page, if exception occurs in the current page, it will be redirected to the error page.

Example:

<body>  
<%@ page errorPage="myerrorpage.jsp" %>  
 <%= 100/0 %>  
</body> 

10. IS ERROR PAGE

Example:

<body>  
<%@ page isErrorPage="true" %>  
 Sorry an exception occured!<br/>  
The exception is: <%= exception %>  
</body>  


2. INCLUDE DIRECTIVE

The include directive is used to include the contents of any resource it may be jsp file, html file or text file. the jsp page is translated only once so it will be better to include static resource.

Syntax:
<%@ include file="resourceName" %>  

Example:
<body>  
<%@ include file="header.html" %>  
</body>

3. TAG LIBRARY DIRECTIVE

The JSP taglib directive is used to define a tag library that defines many tags.

Syntax:
<%@ taglib uri="uriofthetaglibrary" prefix="prefixoftaglibrary" %>  

Example:
<body>  
<%@ taglib uri="http://www.javatpoint.com/tags" prefix="mytag" %>  
<mytag:currentDate/>  
</body>  

EXCEPTION HANDLING IN JSP


Exception Handling:

1. By errorPage and isErrorPage attributes of page directive
2. By <error-page> element in web.xml file

index.jsp
<form action="process.jsp">  
No1:<input type="text" name="n1"/>
No1:<input type="text" name="n2"/>
	<input type="submit" value="divide"/>
</form>

process.jsp
<%@ page errorPage="error.jsp" %>  
<%
String num1=request.getParameter("n1");  
String num2=request.getParameter("n2");  
int a=Integer.parseInt(num1);  
int b=Integer.parseInt(num2);  
int c=a/b;  
out.print("division of numbers is: "+c);  
%>

error.jsp
<%@ page isErrorPage="true" %>  
<h3>Sorry an exception occured!</h3>  
Exception is: <%= exception %>  

ERROR-PAGE ELEMENT IN WEB.XML FILE

This approach is better because you don't need to specify the errorPage attribute in each jsp page. Specifying the single entry in the web.xml file will handle the exception.

1. For Error Specific Type
2. For Error Specific Code

<web-app>  
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/error.jsp</location>
	</error-page>
</web-app> 

 
ACTION TAGS

3 most used tags
1. jsp:forward
2. jsp:include
3. jsp:param

1. FORWARD ACTION TAGS

The jsp:forward action tag is used to forward the request to another resource it may be jsp, html or another resource.

WITHOUT PARAMETERS:

<jsp:forward page="relativeURL"/>

WITH PARAMETERS:

<jsp:forward page="relativeURL">  
	<jsp:paramname="" value="" />  
</jsp:forward>

2. INCLUDE ACTION TAGS

The jsp include action tag includes the resource at request time so it is better for dynamic pages because there might be changes in future.

Code reusability : We can use a page many times such as including header and footer pages in all pages. So it saves a lot of time.

WITHOUT PARAMETERS:

<jsp:include page="relativeURL"/>

WITH PARAMETERS:

<jsp:include page="relativeURL">  
	<jsp:paramname="" value="" />  
</jsp:forward>

MVC IN JSP
MVC stands for Model View and Controller. It is a design pattern that separates the business logic, presentation logic and data.

CONTROLLER acts as an interface between View and Model. Controller intercepts all the incoming requests.

MODEL represents the state of the application i.e. data. It can also have business logic.

VIEW represents the presentaion i.e. UI(User Interface).


PAGINATION IN JSP

<a href="view.jsp?page=1">View Employees</a>


CRUD

User.java
public class User {  
	private int id;  
	private String fullName, userName, passWrod;
}

UserDao.java
public class UserDao { 

	// Updating
	boolean intsert(User){}
	boolean update(User){}
	boolean delete(User){}
	
	//Retriving
	User	getRecordById(int id){}
	int		getRecordsCount(){}
	User	getRecords(int limit, int offset){}
}