SingleTon Design Pattern
- Simplest Design Pattern.
- A single DB connection shared by multiple objects.
- The singleton pattern is a design pattern that restricts the instantiation of a class to one object.
- various design options
- access modifiers

MVC Design Pattern
Model View Controller
- Data Model, Application data, no logic
- Presentation Info, 
- Control info, events, trigered by user

Advantages
- Work simultaneously


Object
-------
- Topmost class
- Benificial, refer any object
- Upcasting

Methods
--------
public final Class getClass()
public int hashCode()
public boolean equals(Object obj)
public String toString()

public final void notify()
public final void notifyAll()

protected Object clone() throws CloneNotSupportedException

WAIT METHODS throws InterruptedException
public final void wait(long timeout)
public final void wait(long timeout,int nanos)
public final void wait()

protected void finalize() throws Throwable

Object cloning
---------
- exact copy
- clone() is used
- Cloneable interface

Object
-----
- Entity has state + behavior
- instance
- address and space needed.

Class
----
- Blueprint
- To create an individual object.
- Consume No space.

Inheritance
---------
When a object acquires all the properties and behaviors of a parent object, is known as inheritance.
- Code reusability
- Achieve Polymorphism.

Polymorphism
-----------
- One task, different ways.
- Method overloading/overriding
Eg: Animal sounds

Abstraction
----------
Hiding internal details and showing functionality is known as abstraction.
- Abstract class and Interfaces
Eg: Phone call


Encapsulation
-----------
- Binding/Wrapping
- Data + Methods/Code
- A single unit
- Bean fully encapsulated class.
Eg: Capsule



Coupling
-------
- Coupling refers to the knowledge/Info/Dependency of another class.
- Detailed info = strong coupling.
- Interfaec/Abstract class = loose/weaker coupling.

Cohesion
--------
- refers to the level of component which performs a single well-defined task.
- A single well-defined task
- Highly cohesive: single task.
- Weakly cohesive: split, separe parts
- java.io package Hightly cohesive
- java.util package Weakly cohesive.


























































