AbstractMap(AC) >> Object(C)
AbstractMap(AC) --> Map(RI)

Constructors:
protected AbstractMap()



+---++---++---++---++---++---+

Map(RI)

Methods:
void	clear()
Object	compute(K,BiFunction<? super K, ? super V, ? extends V>)
Object	computeIfAbsent(K,Function<? super K, ? extends V>)
Object	computeIfPresent(K,BiFunction<? super K, ? super V, ? extends V>)
boolean	containsKey(Object)
boolean	containsValue(Object)
static	Map	copyOf(Map<? extends K, ? extends V>)
static	Map$Entry	entry(K,V)
Set	entrySet()
boolean	equals(Object)
void	forEach(BiConsumer<? super K, ? super V>)
Object	get(Object)
Object	getOrDefault(Object,V)
int	hashCode()
boolean	isEmpty()
Set	keySet()
Object	merge(K,V,BiFunction<? super V, ? super V, ? extends V>)
static	Map	of()
static	Map	of(K,V)
static	Map	of(K,V,K,V)
static	Map	of(K,V,K,V,K,V)
static	Map	of(K,V,K,V,K,V,K,V)
static	Map	of(K,V,K,V,K,V,K,V,K,V)
static	Map	of(K,V,K,V,K,V,K,V,K,V,K,V)
static	Map	of(K,V,K,V,K,V,K,V,K,V,K,V,K,V)
static	Map	of(K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V)
static	Map	of(K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V)
static	Map	of(K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V,K,V)
static transient	Map	ofEntries(Map$Entry<? extends K, ? extends V>[])
Object	put(K,V)
void	putAll(Map<? extends K, ? extends V>)
Object	putIfAbsent(K,V)
Object	remove(Object)
boolean	remove(Object,Object)
Object	replace(K,V)
boolean	replace(K,V,V)
void	replaceAll(BiFunction<? super K, ? super V, ? extends V>)
int	size()
Collection	values()

+---++---++---++---++---++---+

HashMap(C) >> AbstractMap(AC) >> Object(C)
HashMap(C) --> Map(RI),Cloneable(RI),Serializable(RI)

Constructors:
public HashMap(int,float)
public HashMap(Map<? extends K, ? extends V>)
public HashMap(int)
public HashMap()


Methods:
Object	clone()

+---++---++---++---++---++---+

Queue(I) ==> Collection(I) ==> Iterable(RI)

Methods:
Object	element()
boolean	offer(E)
Object	peek()
Object	poll()
Object	remove()

+---++---++---++---++---++---+

AbstractList(AC) >> AbstractCollection(AC) >> Object(C)
AbstractList(AC) --> List(I)

Constructors:
protected AbstractList()



+---++---++---++---++---++---+

RandomAccess(RI)

+---++---++---++---++---++---+

List(I) ==> Collection(I) ==> Iterable(RI)

Methods:
void	add(int,E)
boolean	addAll(int,Collection<? extends E>)
static	List	copyOf(Collection<? extends E>)
Object	get(int)
int	indexOf(Object)
int	lastIndexOf(Object)
ListIterator	listIterator()
ListIterator	listIterator(int)
static	List	of()
static	List	of(E)
static	List	of(E,E)
static	List	of(E,E,E)
static	List	of(E,E,E,E)
static	List	of(E,E,E,E,E)
static	List	of(E,E,E,E,E,E)
static	List	of(E,E,E,E,E,E,E)
static	List	of(E,E,E,E,E,E,E,E)
static	List	of(E,E,E,E,E,E,E,E,E)
static	List	of(E,E,E,E,E,E,E,E,E,E)
static transient	List	of(E[])
Object	remove(int)
void	replaceAll(UnaryOperator<E>)
Object	set(int,E)
void	sort(Comparator<? super E>)
List	subList(int,int)

+---++---++---++---++---++---+

ArrayList(C) >> AbstractList(AC) >> AbstractCollection(AC) >> Object(C)
ArrayList(C) --> List(I),RandomAccess(RI),Cloneable(RI),Serializable(RI)

Constructors:
public ArrayList(Collection<? extends E>)
public ArrayList()
public ArrayList(int)


Methods:
Object	clone()
void	ensureCapacity(int)
void	forEach(Consumer<? super E>)
void	trimToSize()

+---++---++---++---++---++---+

Object(C)


Methods:
boolean	equals(Object)
final native	Class	getClass()
native	int	hashCode()
final native	void	notify()
final native	void	notifyAll()
String	toString()
final	void	wait()
final native	void	wait(long)
final	void	wait(long,int)

+---++---++---++---++---++---+

AbstractCollection(AC) >> Object(C)
AbstractCollection(AC) --> Collection(I)

Constructors:
protected AbstractCollection()



+---++---++---++---++---++---+

AbstractSet(AC) >> AbstractCollection(AC) >> Object(C)
AbstractSet(AC) --> Set(I)

Constructors:
protected AbstractSet()



+---++---++---++---++---++---+

Serializable(RI)

+---++---++---++---++---++---+

Cloneable(RI)

+---++---++---++---++---++---+

Iterable(RI)

Methods:
void	forEach(Consumer<? super T>)
Iterator	iterator()
Spliterator	spliterator()

+---++---++---++---++---++---+

Collection(I) ==> Iterable(RI)

Methods:
boolean	add(E)
boolean	addAll(Collection<? extends E>)
void	clear()
boolean	contains(Object)
boolean	containsAll(Collection<?>)
boolean	equals(Object)
int	hashCode()
boolean	isEmpty()
Stream	parallelStream()
boolean	remove(Object)
boolean	removeAll(Collection<?>)
boolean	removeIf(Predicate<? super E>)
boolean	retainAll(Collection<?>)
int	size()
Stream	stream()
Object[]	toArray()
Object[]	toArray(IntFunction<T[]>)
Object[]	toArray(T[])

+---++---++---++---++---++---+

Set(I) ==> Collection(I) ==> Iterable(RI)

Methods:
static	Set	copyOf(Collection<? extends E>)
static	Set	of()
static	Set	of(E)
static	Set	of(E,E)
static	Set	of(E,E,E)
static	Set	of(E,E,E,E)
static	Set	of(E,E,E,E,E)
static	Set	of(E,E,E,E,E,E)
static	Set	of(E,E,E,E,E,E,E)
static	Set	of(E,E,E,E,E,E,E,E)
static	Set	of(E,E,E,E,E,E,E,E,E)
static	Set	of(E,E,E,E,E,E,E,E,E,E)
static transient	Set	of(E[])

+---++---++---++---++---++---+

SortedSet(I) ==> Set(I) ==> Collection(I) ==> Iterable(RI)

Methods:
Comparator	comparator()
Object	first()
SortedSet	headSet(E)
Object	last()
SortedSet	subSet(E,E)
SortedSet	tailSet(E)

+---++---++---++---++---++---+

NavigableSet(I) ==> SortedSet(I) ==> Set(I) ==> Collection(I) ==> Iterable(RI)

Methods:
Object	ceiling(E)
Iterator	descendingIterator()
NavigableSet	descendingSet()
Object	floor(E)
NavigableSet	headSet(E,boolean)
Object	higher(E)
Object	lower(E)
Object	pollFirst()
Object	pollLast()
NavigableSet	subSet(E,boolean,E,boolean)
NavigableSet	tailSet(E,boolean)

+---++---++---++---++---++---+

TreeSet(C) >> AbstractSet(AC) >> AbstractCollection(AC) >> Object(C)
TreeSet(C) --> NavigableSet(I),Cloneable(RI),Serializable(RI)

Constructors:
public TreeSet(SortedSet<E>)
public TreeSet(Collection<? extends E>)
public TreeSet(Comparator<? super E>)
public TreeSet()
TreeSet(Object>)


Methods:
Object	clone()

+---++---++---++---++---++---+

