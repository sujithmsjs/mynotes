package com.suji.streamstest;

import java.util.Comparator;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import com.suji.streamstest.model.Employee;
import com.suji.streamstest.model.EmployeeRepo;

public class StreamGroupBy {

	public static void main2(String[] args) {
		
		List<Employee> employees = EmployeeRepo.getEmployees();
		
		// Count Males and Females
		Map<String, Long> map = employees.stream()
				.collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));
		map.forEach((k, v) -> System.out.println(k + ":" + v));

		// Show all departments
		List<String> list = employees.stream().map(Employee::getDepartment).distinct()
				.collect(Collectors.toList());
		list.forEach(System.out::println);

		// Avg age of Male and Female Employees
		Map<String, Double> map2 = employees.stream()
				.collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(e -> e.getAge())));
		map2.forEach((k, v) -> System.out.println(k + ":" + v));

		// Maximun salary in both genders
		Map<String, Optional<Employee>> map3 = employees.stream().collect(Collectors.groupingBy(
				Employee::getGender, Collectors.maxBy((e1, e2) -> (int) (e1.getSalary() - e2.getSalary()))));
		map3.forEach((k, v) -> System.out.println(k + ":" + v));

		Optional<Employee> optional = employees.stream()
				.max((e1, e2) -> (int) (e1.getSalary() - e2.getSalary()));
		System.out.println("Highest pain employee in Org: " + optional.get());

		// Average salary of the Organization
		Double avgSal = employees.stream().collect(Collectors.averagingDouble(Employee::getSalary));
		System.out.println("Average salary of the Organization : " + avgSal);

		// Total cost of organization
		DoubleSummaryStatistics collect = employees.stream()
				
				.collect(Collectors.summarizingDouble(Employee::getSalary));
		System.out.println("Total cost of organization : " + collect.getSum());
		System.out.println("Total cost of organization : " + collect.getAverage());

		double salary = employees.stream()
				.collect(Collectors.reducing(new Employee(), (a, b) -> new Employee(a.getSalary() + b.getSalary())))
				.getSalary();

		System.out.println("Total salary : " + salary);

		// Highest paid Salary in the organization
		Map<String, Double> map4 = employees.stream().collect(
				Collectors.groupingBy(Employee::getDepartment, Collectors.averagingDouble(Employee::getSalary)));
		map4.forEach((k, v) -> System.out.println(k + " : " + v));

		// Average Salary in each organization
		Map<String, DoubleSummaryStatistics> map5 = employees.stream().collect(
				Collectors.groupingBy(Employee::getDepartment, Collectors.summarizingDouble(Employee::getSalary)));
		
		map5.forEach((k, v) -> System.out.println(k + " : Count-" + v.getCount()+" Salary-"+v.getSum()));
		
		// Find highest paid employee using maxBy method
		Optional<Employee> collect2 = employees.stream().collect(Collectors.maxBy(Comparator.comparingDouble(Employee::getSalary)));
		System.out.println("Max paid employee: "+collect2.get().getName());
		
		// Get the names of all employees who have joined after 2015.
		employees.stream().filter(e -> e.getYearOfJoining() > 2015).map(Employee::getName).forEach(System.out :: println);
		
		// Count the number of employees in each department.
		Map<String, Long> map6 = employees.stream().collect(Collectors.groupingBy(Employee :: getDepartment, Collectors.counting()));
		System.out.println("---------Number of employees in each department----------");
		map6.forEach((k,v) -> System.out.println(k+" : "+v));
		
		// What is the average salary of each department?
		Map<String, Double> map7 = employees.stream().collect(Collectors.groupingBy(Employee :: getDepartment, Collectors.averagingDouble(Employee::getSalary)));
		System.out.println("----------Average salary of each department----------");
		map7.forEach((k,v) -> System.out.println(k+" : "+v));
		
		// Get the details of youngest male employee in the product development department?
		//Optional<Employee> min = employees.stream().filter(e -> e.getDepartment().equals("Product Development")).filter(e -> e.getGender().equals("Male")).min((e1,e2) -> e1.getAge() - e2.getAge());
		Optional<Employee> min = employees.stream().filter(e -> e.getDepartment().equals("Product Development") && e.getGender().equals("Male")).min(Comparator.comparingInt(Employee::getAge));
		System.out.println("----------youngest male employee----------");
		System.out.println(min.get());
		
		// Who has the most working experience in the organization?
		Optional<Employee> max = employees.stream().max( (e1, e2) -> e2.getYearOfJoining() - e1.getYearOfJoining());
		Optional<Employee> max2 = employees.stream().min(Comparator.comparingInt(Employee:: getYearOfJoining));
		 Optional<Employee> findFirst = employees.stream().sorted(Comparator.comparingInt(Employee::getYearOfJoining)).findFirst();
		 
		
		System.out.println("\nMost working experience in the organization----------");
		System.out.println(max2.get());
		System.out.println(findFirst.get());
		
		
		// How many male and female employees are there in the sales and marketing team?
		Map<String, Long> map8 = employees.stream().filter(e -> e.getDepartment().equals("Sales And Marketing")).collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));
		System.out.println("\n\tMale and female employees in the sales and marketing:");
		map8.forEach((k,v) -> System.out.println(k+" : "+v));
		
		//  What is the average salary of male and female employees?
		Map<String, Double> map9 = employees.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(Employee::getSalary)));
		System.out.println("\n\t Average salary of male and female employees:");
		map9.forEach((k,v) -> System.out.println(k+" : "+v));
		
		// List down the names of all employees in each department?
		Map<String, List<Employee>> map10 = employees.stream().collect(Collectors.groupingBy(Employee::getDepartment, Collectors.toList()));
		System.out.println("\n\t Names of all employees in each department:");
		//Set<Entry<String,List<Employee>>> entrySet = map10.entrySet();
		
		map10.forEach( (k,v) -> {
			System.out.println(">>>"+k+" :");
			v.forEach(val -> System.out.println(val.getName()));
		});
		
		// What is the average salary and total salary of the whole organization?
		Double totalOrgSal = employees.stream().collect(Collectors.summingDouble(Employee :: getSalary));
		Double totalOrgAvgSal = employees.stream().collect(Collectors.averagingDouble(Employee :: getSalary));
		System.out.println("\n totalOrgSal :"+totalOrgSal);
		System.out.println("\n totalOrgAvgSal :"+totalOrgAvgSal);
		
		// Separate the employees who are younger or equal to 25 years from those employees who are older than 25 years.
		Map<String, List<Employee>> map11 = employees.stream().collect(Collectors.groupingBy( e-> e.getAge()>=25? "Above 25":"Below 25" ));
		map11.forEach( (k,v) -> {
			System.out.println(">>>"+k+" :");
			v.forEach(val -> System.out.println(val.getName()));
		});
		
		// Using partitionBy
		Map<Boolean, List<Employee>> map12 = employees.stream().collect(Collectors.partitioningBy( e -> e.getAge() >=25));
		System.out.println("Younger and Older employees: ");
		map12.forEach( (k,v) -> {
			System.out.println(">>>"+k+" :");
			v.forEach(val -> System.out.println(val.getName()));
		});
		System.out.println("Employees whos age is above 25: ");
		map12.get(true).forEach(val -> System.out.println(val.getName()));
		
		// Who is the oldest employee in the organization? What is his age and which department he belongs to?
		Optional<Employee> max3 = employees.stream().max(Comparator.comparingInt(Employee :: getAge));
		System.out.println("Oldest in the Org: "+max3.get().getName());
		
	}

}
