TODO
10:47 01-07-2022


Java 9 Features

==========================
1. Interface Private Methods

==========================
2. Try-With Resources
==========================
Note: try-with-resource close that automatically by using AutoClosable interface.

PrintWriter out = new PrintWriter(file);
try(out){
	out.println("Hello world.");
}


public interface AutoCloseable {
    void close() throws Exception;
}

==========================
3. Anonymous Classes
==========================
In Java 9, as long as the inferred type is denotable, we can use the diamond operator when we create an anonymous inner class.


Data types that can be written in Java program like int, String etc are called denotable types. Java 9 compiler is enough smart and now can infer type.

Note: This feature is included to Java 9, to add type inference in anonymous inner classes.


diamond operator:

I<String> i = new I<>() {		
};

==========================
4. @SafeVarargs Annotation
==========================
5. Collection Factory Methods
==========================
Factory Method
--------------
List.of
Set.of
Map.of
Map Interface ofEntries()




==========================
6. Process API Improvement
==========================
7. New Version-String Scheme
==========================
7.1 Runtime.Version class

Runtime.Version version = Runtime.version();   
version.major()
version.minor()
version.security()
version.pre()
version.build()
==========================
8. Stream API Improvement
==========================

8.1 takeWhile

List<Integer> list = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());
Collections.shuffle(list);
list.stream().takeWhile( e -> e!=5).forEach(System.out :: println);


8.2 dropWhile



8.3 ofNullable

The ofNullable() method is a static method of Stream class that returns a sequential Stream containing a single element if non-null, otherwise returns an empty. Java 9 has introduced this method to avoid NullPointerExceptions and also avoid null checks of streams.

List<Integer> list3 = null;
		Stream.ofNullable(list3).forEach( l -> {
			System.out.println("Stream.ofNullable Iteration through list...");
		});
		
		Stream.of(list3).forEach( l -> {
			System.out.println("Stream.of Iteration through list...");
		});

Output:
Stream.of Iteration through list...



8.4 iterate

IntPredicate isPrime = i -> IntStream.iterate(2, n -> n < i, n -> n+1).allMatch( n -> i%n != 0);
			
		System.out.println(isPrime.test(18));
		
		IntStream.iterate(1 , i -> i < 100, i ->  i+1).filter(isPrime).forEach(System.out :: println);



==========================
9. Java 9 Underscore:
==========================
Java 9 release, underscore is a keyword and can't be used as an identifier or variable name.
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































