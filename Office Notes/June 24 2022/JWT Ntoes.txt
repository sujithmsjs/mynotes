JWT: JSON Web Token
-------------------

JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.

JWT.IO allows you to decode, verify and generate JWT.

Warning: JWTs are credentials, which can grant access to resources. Be careful where you paste them! We do not record tokens, all validation and debugging is done on the client side.

JWT authentication for securing an exposed REST API.

Any user will be able to consume this API only if it has a valid JSON Web Token(JWT).

Steps:
1. Clicent has to sent POST/authenticate with username and password.
2. Server validates username and password.
	if(is username and password valid){
		retrun: generate JWT using security key.
	}else{
		// invalid credintials message.
	}
3. Client GET/hello with JWT in the Header.
4. Server validates JWT using secret key, and returns response.

Spring Security and JWT Configuration
-------------------------------------
1. Generating JWT
2. Validating JWT


1. Generating JWT: Expose a POST API with mapping /authenticate. On passing correct username and password it will generate a JSON Web Token(JWT)

2. If user tries to access GET API with mapping /hello. It will allow access only if request has a valid JSON Web Token(JWT)

Jwt Token Util
--------------
The JwtTokenUtil is responsible for performing JWT operations like creation and validation.


JSON Web Token is a proposed Internet standard for creating data with optional signature and/or optional encryption whose payload holds JSON that asserts some number of claims.


Spring Security OAuth2 implementation to make use of JSON Web Tokens.
----------------------------------------------------------------------


DOT: Data Transfer Object



