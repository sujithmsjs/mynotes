
SET
A collection that contains no duplicate elements. More formally, sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element.


As implied by its name, this interface models the mathematical set abstraction.

Impiled: suggested without being directly expressed.

LIST
An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.

The List interface places additional stipulations, beyond those specified in the Collection interface, on the contracts of the iterator, add, remove, equals, and hashCode methods. Declarations for other inherited methods are also included here for convenience.

HASHMAP
This class implements the Set interface.
Backed by a hash table (actually a HashMap instance).
No guarantees as to the iteration order.
It does not guarantee that the order will remain constant over time.
This class permits the null element.
Not SyncronizedSet
The hash function disperses the elements.

 Set s = Collections.synchronizedSet(new HashSet(...));
 
LINKED HASH SET:
Hash table and linked list implementation of the Set interface, with predictable iteration order.

This implementation differs from HashSet in that it maintains a doubly-linked list running through all of its entries.

 This linked list defines the iteration ordering, which is the order in which elements were inserted into the set (insertion-order).
 
 This implementation spares its clients from the unspecified, generally chaotic ordering provided by HashSet, without incurring the increased cost associated with TreeSet.
 
 