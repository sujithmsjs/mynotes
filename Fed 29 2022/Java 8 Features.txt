concise  kÉ™n'sais
Adjective	
expressing much in few words


SAM interface(Single Abstract Method) by using an expression.

 iterate, filter and extract data.
 
 Lambda expression provides implementation of functional interface.
 
 Java lambda expression is treated as a function, so compiler does not create .class file.
 
 
@FunctionalInterface
interface I{
	void m1();
}
I i =  () -> System.out.println("Hellow");
i.m1();


@FunctionalInterface
interface I{
	void area(int n);
}
//I i =  (n) -> System.out.println("Hellow "+n);
I i =  n -> System.out.println("Hellow "+n);
i.area(23);


@FunctionalInterface
interface I{
	void area(int n,int m);
}
I i =  (n,m) -> System.out.println("Hellow "+n*m);
i.area(5,7);



@FunctionalInterface
interface I{
	int area(int n,int m);
}
I i =  (n,m) ->  n*m;
int n = i.area(5,7);
System.out.println(n);


@FunctionalInterface
interface I{
	int power(int n,int m);
}
I inf =  (n,m) -> { 
	int ans = 1;
	for (int i = 0; i < m; i++) {
		ans = ans*n;
	}
	return ans;
};	
int n = inf.power(2, 8);
System.out.println(n);




CONSUMER
================

//since 1.8
@FunctionalInterface
public interface Consumer<T> {
	void accept(T t);
}

//since 1.5
public interface Iterable<T> {
	Iterator<T> iterator();
	
	 //since 1.8
	default void forEach(Consumer<? super T> action) {
		Objects.requireNonNull(action);
        for (T t : this) {
            action.accept(t);
        }
	}
}


For Each
===========================
class A implements Consumer<Integer>{
	@Override
	public void accept(Integer t) {
		System.out.println(t*t);
	}
}

public class App {
	public static void main(String[] args) {
		List<Integer> list = new ArrayList<>();
		for (int i = 1; i <= 20; i++) {
			list.add(i);
		}
		
		Consumer<Integer> c= new Consumer<Integer>() {
			@Override
			public void accept(Integer t) {
				System.out.println(t+t);
			}
		};
		
		Consumer<Integer> c2 = t -> System.out.println("c2: "+t+t);
		
		A a = new A();
		//list.forEach(c2);
		list.forEach(t -> System.out.println(t+t));
	}
}

ForEach Example 2:
=====================
List<Integer> list = new ArrayList<>();
for (int i = 1; i <= 20; i++) {
	list.add(i);
}
List<Double> doubleList = new ArrayList<>();
list.forEach(t -> doubleList.add(t.doubleValue()) );

doubleList.forEach(t -> System.out.println(t));

public static void main(String[] args) {
	Random r = new Random();
	
	List<Integer> list = new ArrayList<>();
	for (int i = 1; i <= 20; i++) {
		list.add(r.nextInt(100));
	}
	
	Comparator<Integer> c = (m,n) -> {
		return n-m;
	};
	
	Collections.sort(list, (m,n) -> n-m );
	System.out.println(list);
	
}



=================
Method References
=================
Method reference is used to refer method of functional interface.

Types of Method References
There are following types of method references in java:






REFERENCE TO A STATIC METHOD:
=============================
interface I{
	int sqr(int n);
}

class A{
	static int add(int n) {
		return n+n;
	}
	static int pow3(int n) {
		return n*n*n;
	}
	static int sqr(int n) {
		return n*n;
	}
}

public class App {

	public static void main(String[] args) {
		//I inf = new I(); Error
		I inf = A::pow3;
		int ans = inf.sqr(3);
		System.out.println("Ans: "+ans);
	}
}

REFERENCE TO AN INSTANCE METHOD:
================================
interface I{
	int sqr(int n);
}

class A{
	int pow3(int n) {
		return n*n*n;
	}
}

public class App {

	public static void main(String[] args) {
		//I inf = new I(); Error
		A a = new A();
		I inf = a::pow3;
		int ans = inf.sqr(3);
		System.out.println("Ans: "+ans);
	}
}

REFERENCE TO A CONSTRUCTOR:
===========================

interface I{
	A getA();
}

class A{
	A(){
		System.out.println("constructor A");
	}
}

public class App {

	public static void main(String[] args) {
		I inf = A::new;
		A a = inf.getA();
	}
}


=====================
Functional Interfaces
=====================
- contain only one abstract method.
- Functional Interface is also known as Single Abstract Method Interfaces or SAM Interfaces.

============
StringJoiner
============
StringJoiner joinNames = new StringJoiner(",", "[", "]"); 
// Adding values to StringJoiner  
joinNames.add("Rahul");  
joinNames.add("Raju");  
joinNames.add("Peter");  
joinNames.add("Raheem");
System.out.println(joinNames);

[Rahul,Raju,Peter,Raheem]












